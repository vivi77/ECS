include(GenerateExportHeader)

set(IDLIB_NAME "EIDGen")
set(SRCS "EIDGenerator.cpp")
set(HDRS "EIDGenerator.hh")
add_library(${IDLIB_NAME} SHARED ${SRCS} ${HDRS})
target_include_directories(${IDLIB_NAME} PUBLIC
  ${CMAKE_BINARY_DIR})
set_target_properties(${IDLIB_NAME} PROPERTIES IMPORTED_LOCATION ${OUTPUT_LOCATION})
generate_export_header(${IDLIB_NAME})
string(TOLOWER ${IDLIB_NAME} IDLIB_NAME_LOW)
install(TARGETS ${IDLIB_NAME} DESTINATION ${LIBRARY_INSTALL_DIR}/E)
install(FILES
  ${HDRS}
  ${CMAKE_BINARY_DIR}/E/${IDLIB_NAME_LOW}_export.h
  DESTINATION ${INCLUDE_INSTALL_DIR})


set(MANAGER_NAME "EManager")
set(SRCS EManager.cpp)
set(HDRS EManager.hh)
add_library(${MANAGER_NAME} SHARED ${SRCS} ${HDRS})
target_include_directories(${MANAGER_NAME} PUBLIC
  ${CMAKE_BINARY_DIR}
  ${PROJECT_SOURCE_DIR}
  ${PROJECT_SOURCE_DIR}/..)
set_target_properties(${MANAGER_NAME} PROPERTIES IMPORTED_LOCATION ${OUTPUT_LOCATION})
generate_export_header(${MANAGER_NAME})
string(TOLOWER ${MANAGER_NAME} MANAGER_NAME_LOW)
install(TARGETS ${MANAGER_NAME} DESTINATION ${LIBRARY_INSTALL_DIR}/E)
install(FILES
  ${HDRS}
  ${CMAKE_BINARY_DIR}/E/${MANAGER_NAME_LOW}_export.h
  DESTINATION ${INCLUDE_INSTALL_DIR})


if(UNIX)
  set(EVENT_OUTPUT_LOCATION ${OUTPUT_LOCATION}/lib/E)
elseif(WIN32)
  set(EVENT_OUTPUT_LOCATION ${OUTPUT_LOCATION})
endif(UNIX)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${EVENT_OUTPUT_LOCATION})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${EVENT_OUTPUT_LOCATION})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${EVENT_OUTPUT_LOCATION})
foreach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
  string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})
endforeach(OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES)

subdirlist(EVENT_LIST ${CMAKE_CURRENT_SOURCE_DIR})
foreach (EVENT ${EVENT_LIST})
  add_subdirectory(${EVENT})
endforeach()
